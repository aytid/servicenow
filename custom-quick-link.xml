<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Quick Links Widget – ServiceNow</title>
  <link rel="icon" href="images/r-letter-logo.png" type="image/x-icon" />
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@100;400;700&display=swap" rel="stylesheet"/>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet"/>
 <style>
  html {
    scroll-behavior: smooth;
  }

  body {
    margin: 0;
    font-family: "Poppins", sans-serif;
    background: linear-gradient(to bottom right, #f8f9fa, #e8ebf0);
    color: #212529;
  }

  section {
    scroll-margin-top: 10px;
  }

  .section {
    padding: 60px 20px;
    max-width: 900px;
    margin: 40px auto;
    background: white;
    border-radius: 12px;
    box-shadow: 0 12px 30px rgba(0, 0, 0, 0.1);
  }

  h1, h2, h3, h4 {
    font-weight: 500;
    color: #181a1f;
    line-height: 1.4;
    margin-bottom: 20px;
  }

  h3, h4 {
    font-size: 1.25rem;
  }

  code, pre {
    background: #f1f3f5;
    padding: 12px;
    display: block;
    white-space: pre-wrap;
    border-left: 4px solid #0077cc;
    overflow-x: auto;
    border-radius: 6px;
    font-family: "Courier New", Courier, monospace;
  }

  .code-container.collapsed {
    max-height: 100px;
    overflow: hidden;
    position: relative;
    transition: max-height 0.3s ease;
  }

  .code-container.expanded {
    max-height: none;
  }

  button {
    background-color: #0077cc;
    color: white;
    border: none;
    padding: 10px 20px;
    margin-top: 10px;
    cursor: pointer;
    font-weight: 500;
    border-radius: 24px;
    transition: all 0.3s ease;
  }

  button:hover {
    background-color: #005fa3;
    transform: translateY(-2px);
  }

  .quick-links li {
    margin-bottom: 8px;
  }

  .quick-links a {
    color: #0077cc;
    text-decoration: none;
    font-weight: 500;
  }

  .quick-links a:hover {
    text-decoration: underline;
  }

  .quicklinkimg img {
    width: 100%;
    border: 1px solid #dee2e6;
    border-radius: 12px;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
  }

  footer {
    text-align: center;
    padding: 32px 20px 8px;
    background: #181a1f;
    color: white;
    margin-top: 60px;
    font-weight: 400;
  }

  .navbar-dark .navbar-nav .nav-link {
    color: white !important;
  }

  @media (max-width: 576px) {
    body {
      font-size: 1rem;
    }

    .section {
      padding: 30px 15px;
    }

    h1, h2 {
      font-size: 1.4rem;
    }

    h3, h4 {
      font-size: 1.2rem;
    }

    .quicklinkimg img {
      max-width: 100%;
      height: auto;
    }
  }
</style>

</head>
<body>

	<nav class="navbar navbar-expand-md navbar-dark bg-dark sticky-top shadow-sm">
  <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" style="border: none;">
    <img src="images/menu.png" alt="Menu" style="max-width: 32px; height: auto;" />
  </button>
  <span class="navbar-text ml-auto" style="color: white; font-weight: 600; font-size: 1.25rem;">
    Rohan's blog
  </span>
  <div class="collapse navbar-collapse" id="navbarNav">
    <ul class="navbar-nav ml-auto">
      <!-- You can hide links here or add if needed -->
      <li class="nav-item"><a class="nav-link" href="index.html#home">Home</a></li>
      <li class="nav-item"><a class="nav-link" href="index.html#contact">Contact</a></li>
    </ul>
  </div>
</nav>

  <section class="section">
    <h1 class="mb-4">Custom Quick Link Widget</h1>
    <p><strong>Author:</strong> Me. Blame me if it breaks.</p>
    <p>Here’s how I built a custom ServiceNow widget that transforms ordinary links into vibrant, center-aligned cards. <br> Stylish? Absolutely. <br> <span style="color: red;" >Overengineered?</span> Maybe.</p>
    <p>Steps to Create this Custom Quick Link Widget</p>
<ol>
  <li>From the All menu, navigate to Service Portal > Widgets.</li>
  <li>In the widget list, search for "Quick Links" and open its record.</li>
  <li>Once the widget record opens, click the Clone button located in the top-right corner. This will create a duplicate widget titled "Copy of Quick Links".</li>
  <li>Update the cloned widget’s Name, ID, and Description to reflect your custom version.</li>
  <li>Scroll down and update the widget’s HTML Template, CSS, Client Script, and Server Script sections as outlined in the following steps.</li>
  <li>Alternatively, you can import the pre-configured XML file provided at the end of this article to apply the custom layout and behaviour instantly.</li>
</ol>

<!-- Download Button -->
<button onclick="forceDownload()" style="
  padding: 10px 20px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
">
  ⬇ Download Widget XML from GitHub
</button>

    <h2 class="mt-5">Quick Navigation</h2>
    <ul class="quick-links">
      <li><a href="#html">HTML Template</a></li>
      <li><a href="#css">CSS Styling</a></li>
      <li><a href="#server">Server Script</a></li>
      <li><a href="#client">Client Script</a></li>
    </ul>

    <h2 id="html" class="mt-5">HTML Template</h2>
    <div id="code-html" class="code-container collapsed">
      <pre><code>
&lt;!-- Quick Link Card --&gt;
&lt;div class="all-card-container"&gt;
  &lt;a class="quick-links card"
     aria-labelledby="{{data.instanceId}}-quick-link"
     id="{{data.instanceId}}-quick-link"
     ng-href="{{data.json_data[0].url}}"
     ng-click="clicked(data.json_data[0])"
     ng-attr-target="{{data.json_data[0].target}}"
     tabindex="0"&gt;

    &lt;div class="circle"&gt;
      &lt;div class="icon" 
           ng-if="data.json_data[0].icon &amp;&amp; data.json_data[0].icon.length"
           style="background-image: url({{data.json_data[0].icon}});"&gt;&lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="overlay"&gt;&lt;/div&gt;

    &lt;!-- Title --&gt;
    &lt;p class="card-title"&gt;{{data.title}}&lt;/p&gt;

    &lt;!-- Short description --&gt;
    &lt;p class="card-description"&gt;{{data.short_description}}&lt;/p&gt;

  &lt;/a&gt;
&lt;/div&gt;
</code></pre>

    </div>
    <button onclick="toggleCode('code-html', this)">Read more ↓</button>
    <button id="html-copy-button" onclick="copyHTMLCode()">Copy</button>
    <h2 id="css" class="mt-5">CSS Styling</h2>
    <div id="code-css" class="code-container collapsed">
      <pre><code>.quick-links {
  --bg-color: #DCE9FF;
  --bg-color-light: #f1f7ff;
  --text-color-hover: #4C5656;
  --box-shadow-color: rgba(220, 233, 255, 0.48);
}

.all-card-container {
  display: flex;
  justify-content: center;
  width: 260px;
  margin: auto;
  margin-top: -8rem;
}

.quick-links.card {
  width: 250px;
  height: 321px;
  background: #fff;
  border: none;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  position: relative;
  transition: all 0.3s ease-out;
  text-decoration: none;
  border-radius: 5px;
}

.quick-links.card:hover {
  transform: translateY(-25px) scale(1.005) translateZ(0);
  box-shadow: 0 24px 36px rgba(0,0,0,0.11),
              0 24px 46px var(--box-shadow-color);
}

.quick-links.card:hover .overlay {
  transform: scale(30);
}

.quick-links.card:hover .circle {
  border-color: var(--bg-color-light);
  background: var(--bg-color);
}

.quick-links.card:hover .circle:after {
  background: var(--bg-color-light);
}

.quick-links.card:hover p {
  color: var(--text-color-hover);
}

.quick-links.card p {
  font-size: 17px;
  color: #4C5656;
  margin-top: 30px;
  z-index: 1;
  transition: color 0.3s ease-out;
}

.quick-links .circle {
  width: 131px;
  height: 131px;
  border-radius: 50%;
  background: #fff;
  border: 3px solid var(--bg-color);
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  z-index: 1;
  transition: all 0.3s ease-out;
}

.quick-links .circle:after {
  content: "";
  width: 118px;
  height: 118px;
  display: block;
  position: absolute;
  background: var(--bg-color);
  border-radius: 50%;
  transition: opacity 0.3s ease-out;
}

.quick-links .circle .icon {
  width: 64px;
  height: 64px;
  background-size: cover;
  z-index: 10000;
  position: relative;
}

.quick-links .overlay {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background: var(--bg-color);
  position: absolute;
  top: 100px;
  left: 100px;
  z-index: 0;
  transition: transform 0.3s ease-out;
}

.card-title {
  text-align: center;
  font-weight: 600;
  font-size: 18px;
  margin: 10px 0 0;
}

.card-description {
  text-align: center;
  font-size: 14px;
  margin: 6px 0 0;
  color: #666;
}

.col-md-3 {
  width: 24%;
}

	</code></pre>
    </div>
    <button onclick="toggleCode('code-css', this)">Read more ↓</button>
    <button id="css-copy-button" onclick="copyCSSCode()">Copy</button>

    <h2 id="server" class="mt-5">Server Script</h2>
    <div id="code-server" class="code-container collapsed">
            <pre><code>(function () {
    data.instanceId = $sp.getDisplayValue("sys_id");
    var quickLinkId = $sp.getParameter("quick_link_id");
    var pageId = $sp.getParameter("id");

    var quickLinkUtil = new sn_ex_sp.QuickLinkUtil();

    // Options
    data.title = (options && options.title) ? options.title : "";
    data.short_description = (options && options.short_description) ? options.short_description : "";
    var selectedQuickLink = (options && options.select_a_quick_link) ? options.select_a_quick_link : "";

    // Fetch JSON data
    if (quickLinkId && pageId === "quick_link_preview") {
        data.json_data = quickLinkUtil.fetchQuicklinksForHomePage(quickLinkId, data.instanceId);
    } else if (selectedQuickLink) {
        data.json_data = quickLinkUtil.fetchQuicklinksForHomePage(selectedQuickLink, data.instanceId);
    } else {
        // Default: fetch the first Quick Link available
        var gr = new GlideRecord('sn_ex_sp_quick_link');
        gr.orderBy('sys_created_on'); // or any other ordering
        if (gr.query() && gr.next()) {
            selectedQuickLink = gr.sys_id.toString();
            data.json_data = quickLinkUtil.fetchQuicklinksForHomePage(selectedQuickLink, data.instanceId);
        } else {
            data.json_data = [];
        }
    }

    // Set title: options.title or Quick Link name
    if (!data.title && selectedQuickLink) {
        var grTitle = new GlideRecord('sn_ex_sp_quick_link');
        if (grTitle.get(selectedQuickLink)) {
            data.title = grTitle.name.toString();
        }
    }

    // Handle guided help click
    if (input && input.action === "openGuidedhelp" && input.guidedHelpId) {
        var portal = $sp.getPortalRecord();
        data.pageId = $sp.getParameter("id") ? $sp.getParameter("id") : (portal && portal.homepage.getDisplayValue());
        data.guidedHelpResponse = quickLinkUtil.handleGuidedHelpClick(input.guidedHelpId, data.pageId, "quick_link");
    }
})();

            </code></pre>
    </div>
    <button onclick="toggleCode('code-server', this)">Read more ↓</button>
    <button id="server-copy-button" onclick="copyServerCode()">Copy</button>

    <h2 id="client" class="mt-5">Client Script</h2>
    <div id="code-client" class="code-container collapsed">
            <pre><code>api.controller = function($scope, $timeout, $window) {
    var c = this;
    $scope.isLoading = false;

    $scope.clicked = function(item) {
        if (item.type === "guided_help") {
            c.server.get({
                action: "openGuidedhelp",
                guidedHelpId: item.guided_help
            }).then(function(resp) {
                $timeout(function() {
                    $window.open(resp.data.guidedHelpResponse.url, "_self");
                });
            });
        }
    };

		c.asyncGet = function() {
        $scope.isLoading = true;
        c.data.action = "loadData";
        c.server.update().then(function() {
            $scope.isLoading = false;
        });
    };

    if (c.data.load_config === "async") {
        setTimeout(c.asyncGet);
    }
};

            </code></pre>
    </div>
    <button onclick="toggleCode('code-client', this)">Read more ↓</button>
    <button id="client-side-copy-button" onclick="copyClientSideCode()">Copy</button>

    <h2 class="mt-5">Final Result</h2>
    <p>You’ll get a responsive set of colorful cards centered on the page. Each card links to a different ServiceNow page or resource. This widget works great on Employee Center portals.</p>
    <div class="quicklinkimg" style="display: flex; flex-direction: column; gap: 20px; align-items: center;">
      <img src="images/quicklink-before-hover.png" alt="Quick Link Reference 1" />
      <img src="images/quicklink-on-hover.png" alt="Quick Link Reference 2" />
    </div>
  </section>

  <footer>
    <p>&copy; 2025 Rohan Aditya. All rights reserved.</p>
  </footer>

  <script>


    function toggleCode(id, btn) {
      const code = document.getElementById(id);
      if (code.classList.contains("expanded")) {
        code.classList.remove("expanded");
        code.classList.add("collapsed");
        btn.innerText = "Read more ↓";
      } else {
        code.classList.remove("collapsed");
        code.classList.add("expanded");
        btn.innerText = "Show less ↑";
      }
    }


    function forceDownload() {
  const url = "https://raw.githubusercontent.com/aytid/servicenow/main/custom-quick-link.xml";
  fetch(url)
    .then(res => res.blob())
    .then(blob => {
      const a = document.createElement("a");
      a.href = URL.createObjectURL(blob);
      a.download = "QuickLinksWidget.xml"; // <-- Desired filename here
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
    })
    .catch(() => alert("Download failed. Please check the file URL."));
}


function copyHTMLCode() {
  const code = document.getElementById("code-html").innerText;
  navigator.clipboard.writeText(code).then(() => {
    document.getElementById('html-copy-button').innerHTML = 'Copied';
    //alert("HTML code copied to clipboard!");
  }).catch(err => {
    //alert("Failed to copy: " + err);
  });
}

function copyCSSCode() {
  const code = document.getElementById("code-css").innerText;
  navigator.clipboard.writeText(code).then(() => {
    document.getElementById('css-copy-button').innerHTML = 'Copied';
    //alert("HTML code copied to clipboard!");
  }).catch(err => {
    //alert("Failed to copy: " + err);
  });
}

function copyServerCode() {
  const code = document.getElementById("code-server").innerText;
  navigator.clipboard.writeText(code).then(() => {
    document.getElementById('server-copy-button').innerHTML = 'Copied';
    //alert("HTML code copied to clipboard!");
  }).catch(err => {
    //alert("Failed to copy: " + err);
  });
}

function copyClientSideCode() {
  const code = document.getElementById("code-client").innerText;
  navigator.clipboard.writeText(code).then(() => {
    document.getElementById('client-side-copy-button').innerHTML = 'Copied';
    //alert("HTML code copied to clipboard!");
  }).catch(err => {
    //alert("Failed to copy: " + err);
  });
}
  </script>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.2/dist/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>
